from aiogram import types

from bot.utils.loader import bot, dp
from bot.models import TelegramUser, ItemPrice
from asgiref.sync import sync_to_async
from bot.handlers import logic

from django.contrib.auth.models import User
from django.db import IntegrityError

from bot.utils.steam_price_checker import check_item_price

from aiogram.utils.exceptions import MessageTextIsEmpty

from aiogram.dispatcher import FSMContext

from bot.keyboards import keyboard


@dp.message_handler(commands=["notify_on"])
async def notify_on(message: types.Message):
    await TelegramUser.objects.filter(pk=message.from_user.id).aupdate(notify=True)


@dp.message_handler(commands=["notify_off"])
async def notify_off(message: types.Message):
    await TelegramUser.objects.filter(pk=message.from_user.id).aupdate(notify=False)


@dp.message_handler(commands=["profit"])
@dp.message_handler(state=logic.FiniteStateMachine.profit)
async def change_profit(message: types.Message, state: FSMContext):
    user_request = await TelegramUser.objects.aget(chat_id=message.from_user.id)
    language = await sync_to_async(user_request.get_language)()

    messages = {
        "ua": {
            "set": "–ü—Ä–∏–±—É—Ç–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {profit}%",
            "command_usage": "–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –±–∞–∂–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /profit <profit>",
            "try_again": "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞.",
        },
        "en": {
            "set": "Profit set to {profit}%",
            "command_usage": "You need to provide the desired profit. Use the command like this: /profit <profit>",
            "try_again": "Try again. You need to provide numbers only.",
        },
    }

    current_state = await state.get_state()
    if current_state is None:
        profit = message.get_args()
    else:
        profit = message.text
        await state.finish()
    try:
        await sync_to_async(user_request.set_desired_profit)(int(profit))
        await message.reply(messages[language]["set"].format(profit=profit))
    except MessageTextIsEmpty:
        await message.reply(messages[language]["command_usage"])
    except:
        await message.reply(messages[language]["try_again"])


@dp.message_handler(commands=["check"])
@dp.message_handler(state=logic.FiniteStateMachine.check)
async def check_price(message: types.Message, state: FSMContext):
    user_request = await TelegramUser.objects.aget(chat_id=message.from_user.id)
    language = await sync_to_async(user_request.get_language)()

    messages = {
        "ua": {
            "price": "–¶—ñ–Ω–∞ {item_name} —î {price}",
            "not_found": "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            "command_usage": "–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /check <item_name>",
            "try_again": "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑",
        },
        "en": {
            "price": "Price of {item_name} is {price}",
            "not_found": "Item not found",
            "command_usage": "You need to provide an item name. Use the command like this: /check <item_name>",
            "try_again": "Try again",
        },
    }

    current_state = await state.get_state()
    try:
        if current_state is None:
            item_name = " ".join(message.get_args().split())
        else:
            item_name = message.text
            await state.finish()
        if await ItemPrice.objects.filter(name=item_name).aexists():
            price = await check_item_price(item_name=item_name)
            await message.reply(messages[language]["price"].format(item_name=item_name, price=price))
        else:
            await message.reply(messages[language]["not_found"])
    except MessageTextIsEmpty:
        await message.reply(messages[language]["command_usage"])
    except:
        await message.reply(messages[language]["try_again"])


@dp.message_handler(commands=["create_user"])
@dp.message_handler(state=logic.FiniteStateMachine.create_user)
async def create_user(message: types.Message, state: FSMContext):
    user_request = await TelegramUser.objects.aget(chat_id=message.from_user.id)
    language = await sync_to_async(user_request.get_language)()

    messages = {
        "ua": {
            "created": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π",
            "username_exists": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ü–∏–º —ñ–º–µ–Ω–µ–º –≤–∂–µ —ñ—Å–Ω—É—î",
            "already_exists": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î",
            "provide_username_password": "–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å.",
        },
        "en": {
            "created": "User created",
            "username_exists": "User with this username already exists",
            "already_exists": "User already exists",
            "provide_username_password": "You need to provide a username and a password.",
        },
    }

    current_state = await state.get_state()
    try:
        if current_state is None:
            username, password = message.get_args().split()
        else:
            username, password = message.text.split()
            await state.finish()
    except ValueError:
        await message.reply(messages[language]["provide_username_password"])
        return
    user_request_user = await sync_to_async(lambda: user_request.user)()
    if not user_request_user:
        try:
            user = await sync_to_async(User.objects.create_user)(username=username, password=password)
            await sync_to_async(user.save)()
            await sync_to_async(user_request.set_user)(user)
            await message.reply(messages[language]["created"])
        except IntegrityError:
            await message.reply(messages[language]["username_exists"])
    else:
        await message.reply(messages[language]["already_exists"])


@dp.message_handler(commands=["help"])
async def help(message: types.Message = None, chat_id=None):
    if chat_id is None:
        chat_id = message.chat.id
    user_request = await TelegramUser.objects.aget(chat_id=chat_id)
    language = await sync_to_async(user_request.get_language)()

    commands = {
        "user": {"ua": "‚úÖ –ö–æ–º–∞–Ω–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚úÖ", "en": "‚úÖ User commands ‚úÖ"},
        "help": {"ua": "/help - –≤–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", "en": "/help - show the list of commands"},
        "notify_on": {"ua": "/notify_on - —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", "en": "/notify_on - enable notifications"},
        "notify_off": {"ua": "/notify_off - –≤–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", "en": "/notify_off - disable notifications"},
        "check": {
            "ua": "/check <–Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É> - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É",
            "en": "/check <item name> - check the price of the item",
        },
        "profit": {
            "ua": "/profit <–ø—Ä–∏–±—É—Ç–æ–∫> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±–∞–∂–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö",
            "en": "/profit <profit> - set the desired profit in percentage",
        },
        "create_user": {
            "ua": "/create_user <—ñ–º'—è> <–ø–∞—Ä–æ–ª—å> - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
            "en": "/create_user <username> <password> - create a user",
        },
        "staff": {"ua": "‚ú® –ö–æ–º–∞–Ω–¥–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—É ‚ú®", "en": "‚ú® Staff commands ‚ú®"},
        "start_notifier": {
            "ua": "/start_notifier - –ø–æ—á–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ csmoney —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å",
            "en": "/start_notifier - start csmoney parse and sending notifications",
        },
        "stop_notifier": {
            "ua": "/stop_notifier - –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ csmoney —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å",
            "en": "/stop_notifier - stop csmoney parse and sending notifications",
        },
        "update": {
            "ua": "/update <–Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É> - –æ–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö",
            "en": "/update <item_name> - update the price of the item in the database",
        },
        "admin": {"ua": "üßë‚Äçüíª –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üßë‚Äçüíª", "en": "üßë‚Äçüíª Admin commands üßë‚Äçüíª"},
        "parse_on_start_on": {
            "ua": "/parse_on_start_on - –≤–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞",
            "en": "/parse_on_start_on - enable parsing on bot start",
        },
        "parse_on_start_off": {
            "ua": "/parse_on_start_off - –≤–∏–º–∫–Ω—É—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞",
            "en": "/parse_on_start_off - disable parsing on bot start",
        },
        "time_to_update": {
            "ua": "/time_to_update <–≥–æ–¥–∏–Ω–∏> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω",
            "en": "/time_to_update <hours> - set the time to update prices",
        },
        "page_count": {
            "ua": "/page_count <–∫—ñ–ª—å–∫—ñ—Å—Ç—å> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É",
            "en": "/page_count <count> - set the number of pages to parse",
        },
        "csmoney_discount": {
            "ua": "/csmoney_discount <–∑–Ω–∏–∂–∫–∞> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–¥–æ–≤—ñ–ª—å–Ω—É –∑–Ω–∏–∂–∫—É –Ω–∞ —Å–∞–π—Ç—ñ csmoney",
            "en": "/csmoney_discount <discount> - set the desired discount on csmoney site",
        },
        "steam_allowed_profit": {
            "ua": "/steam_allowed_profit <–ø—Ä–∏–±—É—Ç–æ–∫> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±–∞–∂–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ —Å–∞–π—Ç—ñ steam",
            "en": "/steam_allowed_profit <profit> - set the desired profit on steam site",
        },
        "staff_add": {
            "ua": "/staff_add <id> - –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É",
            "en": "/staff_add <id> - add a user to the staff",
        },
        "staff_remove": {
            "ua": "/staff_remove <id> - –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—É",
            "en": "/staff_remove <id> - remove a user from the staff",
        },
    }

    messages = {
        "ua": {"help": "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" + "\n".join(command["ua"] for command in commands.values())},
        "en": {"help": "Available commands:\n" + "\n".join(command["en"] for command in commands.values())},
    }

    if message:
        await message.reply(messages[language]["help"])
    else:
        await bot.send_message(chat_id, messages[language]["help"])
